var searchIndex = JSON.parse('{\
"adakairust":{"doc":"Adakairust is a collection of functions useful for …","t":[0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,4,13,13,13,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,6,17,13,4,4,13,13,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0],"n":["node","ping","types","Node","addr","borrow","borrow_mut","clone","clone_into","con_latency","continent","default","deserialize","fmt","from","into","network_type","new_from_json","node_type","online","online_error","port","serialize","set_addr","set_con_latency","set_continent","set_node_type","set_online","set_online_error","set_port","set_state","set_total_latency","set_valency","state","to_owned","total_latency","try_from","try_into","type_id","valency","Latency","MessageIn","MessageOut","Node","Quit","Quit","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","ping","ping_vec","try_from","try_from","try_into","try_into","type_id","type_id","id","name","network_magic","port","conn_latency","error","id","is_error","online","total_latency","AdakaiResult","MAINNET_MAGIC","Mainnet","NetworkType","NodeType","Producer","Relay","TESTNET_MAGIC","TestNet","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deserialize","deserialize","fmt","fmt","from","from","into","into","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","types"],"q":["adakairust","","","adakairust::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","adakairust::ping","","","","","","","","","","","","","","","","","","","","","","","","adakairust::ping::MessageIn","","","","adakairust::ping::MessageOut","","","","","","adakairust::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["node module holds all the functions related to the …","ping module provides functions for performing a ping to a …","types moduls holds multiple helper types related to all of …","Node contains data for describing a cardano node …","addr: returns the IP address or DNS name","","","","","con_latency: returns the connection latency is previously …","continent: returns the continent the node is physically …","","","","","","<strong>network_type</strong>: returns the cardano network type node …","new_from_json:  takes a json encoded string and …","<strong>node_type</strong>: returns the cardano node type (relay or …","online: returns the online state, true for online, false …","online_error: returns the error associated to the online …","port: returns the TCP port used by the node","","set_addr: sets the cardano node IP or valid DNS address","set_con_latency:  sets the node connection latency (see …","set_continent: sets the continent where the node is …","set_node_type:: sets type of node, (RELAY or PRODUCER)","set_online: set online status","set_online_error: sets the error that explains non-online …","set_port: sets the cardano node TCP port","set_state: sets the state where the node is physically …","set_total_latency:  sets the node connection latency (see …","set_valency:  sets the node valency","continent: returns the state the node is physically …","","total_latency: returns the total latency is previously set","","","","valency: returns the valency of the node default: 1","Latency is the message body of the ping response","MessageOut holds the message crafted with the information …","MessageOut holds the message crafted with the information …","Node contains the message body","Quit signal the worker thread to quit","Quit signal the worker thread to quit","","","","","","","","","","","ping: sends a ping message to a node, return the ping …","ping_vec: sends a ping message to each of the nodes …","","","","","","","id is the position in the input vector","name: IP or valid DNS address of the node","network_magic of the cardano network the node belongs to","port: TCP port of the node","conn_latency is the elapsed time measured from the start …","error is the description of the error detected","id is the position of the node in the input vector of nodes","is_error is true if there was any kind of connection error","online is true if the node responded to the ping …","total_latency is the total elapsed time taken by the node …","AdakaiResult is a generic result type","MAINNET_MAGIC for cardano main network","Mainnet for cardano","NetworkType holds the two different cardano networks …","NodeType holds the two different cardano node types used …","Producer node","Relay node","TESTNET_MAGIC for cardano test network","Testnet for cardano","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,3,3,2,3,2,3,2,3,2,3,2,3,2,0,0,3,2,3,2,3,2,4,4,4,4,5,5,5,5,5,5,0,0,6,0,0,7,7,0,6,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0],"f":[null,null,null,null,[[],["str",15]],[[]],[[]],[[],["node",3]],[[]],[[],["duration",3]],[[],["str",15]],[[],["node",3]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["networktype",4]],[[["networktype",4],["string",3]],[["adakairesult",6,["node"]],["node",3]]],[[],["nodetype",4]],[[],["bool",15]],[[],["string",3]],[[],["u16",15]],[[],["result",4]],[[["string",3]]],[[["duration",3]]],[[["string",3]]],[[["networktype",4]]],[[["bool",15]]],[[["string",3]]],[[["u16",15]]],[[["string",3]]],[[["duration",3]]],[[["u16",15]]],[[],["str",15]],[[]],[[],["duration",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u16",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u16",15],["networktype",4],["string",3]]],[[["networktype",4],["vec",3,["node"]],["node",3]],[["vec",3,["node"]],["node",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["networktype",4]],[[],["nodetype",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"Node"],[4,"MessageOut"],[4,"MessageIn"],[13,"Node"],[13,"Latency"],[4,"NetworkType"],[4,"NodeType"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};